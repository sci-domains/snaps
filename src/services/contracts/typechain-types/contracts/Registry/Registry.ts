/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizer"
      | "addVerifier"
      | "domainHashToRecord"
      | "domainOwner"
      | "domainVerifier"
      | "isDomainOwner"
      | "registerDomain"
      | "registerDomainWithVerifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizerAdded"
      | "DomainRegistered"
      | "TrustedVerifierAdded"
      | "VerifierAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainHashToRecord",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainVerifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDomainOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [BigNumberish, AddressLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomainWithVerifier",
    values: [BigNumberish, string, boolean, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainHashToRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDomainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainWithVerifier",
    data: BytesLike
  ): Result;
}

export namespace AuthorizerAddedEvent {
  export type InputTuple = [
    authorizerId: BigNumberish,
    authorizer: AddressLike,
    msgSender: AddressLike
  ];
  export type OutputTuple = [
    authorizerId: bigint,
    authorizer: string,
    msgSender: string
  ];
  export interface OutputObject {
    authorizerId: bigint;
    authorizer: string;
    msgSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    authorizer: BigNumberish,
    owner: AddressLike,
    domainHash: BytesLike,
    domain: string
  ];
  export type OutputTuple = [
    authorizer: bigint,
    owner: string,
    domainHash: string,
    domain: string
  ];
  export interface OutputObject {
    authorizer: bigint;
    owner: string;
    domainHash: string;
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedVerifierAddedEvent {
  export type InputTuple = [
    verifierId: BigNumberish,
    verifier: AddressLike,
    msgSender: AddressLike
  ];
  export type OutputTuple = [
    verifierId: bigint,
    verifier: string,
    msgSender: string
  ];
  export interface OutputObject {
    verifierId: bigint;
    verifier: string;
    msgSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [
    owner: AddressLike,
    domainHash: BytesLike,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    domainHash: string,
    verifier: string
  ];
  export interface OutputObject {
    owner: string;
    domainHash: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registry extends BaseContract {
  connect(runner?: ContractRunner | null): Registry;
  waitForDeployment(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizer: TypedContractMethod<
    [authorizerId: BigNumberish, authorizer: AddressLike],
    [void],
    "nonpayable"
  >;

  addVerifier: TypedContractMethod<
    [domainHash: BytesLike, verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  domainHashToRecord: TypedContractMethod<
    [domainHash: BytesLike],
    [[string, string] & { owner: string; verifier: string }],
    "view"
  >;

  domainOwner: TypedContractMethod<[domainHash: BytesLike], [string], "view">;

  domainVerifier: TypedContractMethod<
    [domainHash: BytesLike],
    [string],
    "view"
  >;

  isDomainOwner: TypedContractMethod<
    [domainHash: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  registerDomain: TypedContractMethod<
    [
      authorizer: BigNumberish,
      owner: AddressLike,
      domain: string,
      isWildcard: boolean
    ],
    [void],
    "nonpayable"
  >;

  registerDomainWithVerifier: TypedContractMethod<
    [
      authorizer: BigNumberish,
      domain: string,
      isWildcard: boolean,
      verifier: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizer"
  ): TypedContractMethod<
    [authorizerId: BigNumberish, authorizer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<
    [domainHash: BytesLike, verifier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "domainHashToRecord"
  ): TypedContractMethod<
    [domainHash: BytesLike],
    [[string, string] & { owner: string; verifier: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "domainOwner"
  ): TypedContractMethod<[domainHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "domainVerifier"
  ): TypedContractMethod<[domainHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isDomainOwner"
  ): TypedContractMethod<
    [domainHash: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDomain"
  ): TypedContractMethod<
    [
      authorizer: BigNumberish,
      owner: AddressLike,
      domain: string,
      isWildcard: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDomainWithVerifier"
  ): TypedContractMethod<
    [
      authorizer: BigNumberish,
      domain: string,
      isWildcard: boolean,
      verifier: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorizerAdded"
  ): TypedContractEvent<
    AuthorizerAddedEvent.InputTuple,
    AuthorizerAddedEvent.OutputTuple,
    AuthorizerAddedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedVerifierAdded"
  ): TypedContractEvent<
    TrustedVerifierAddedEvent.InputTuple,
    TrustedVerifierAddedEvent.OutputTuple,
    TrustedVerifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;

  filters: {
    "AuthorizerAdded(uint256,address,address)": TypedContractEvent<
      AuthorizerAddedEvent.InputTuple,
      AuthorizerAddedEvent.OutputTuple,
      AuthorizerAddedEvent.OutputObject
    >;
    AuthorizerAdded: TypedContractEvent<
      AuthorizerAddedEvent.InputTuple,
      AuthorizerAddedEvent.OutputTuple,
      AuthorizerAddedEvent.OutputObject
    >;

    "DomainRegistered(uint256,address,bytes32,string)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;

    "TrustedVerifierAdded(uint256,address,address)": TypedContractEvent<
      TrustedVerifierAddedEvent.InputTuple,
      TrustedVerifierAddedEvent.OutputTuple,
      TrustedVerifierAddedEvent.OutputObject
    >;
    TrustedVerifierAdded: TypedContractEvent<
      TrustedVerifierAddedEvent.InputTuple,
      TrustedVerifierAddedEvent.OutputTuple,
      TrustedVerifierAddedEvent.OutputObject
    >;

    "VerifierAdded(address,bytes32,address)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
  };
}
