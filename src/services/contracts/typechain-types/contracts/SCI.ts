/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SCIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "domainOwner"
      | "initialize"
      | "isVerifiedForDomain"
      | "isVerifiedForDomainHash"
      | "isVerifiedForMultipleDomainHashes"
      | "isVerifiedForMultipleDomains"
      | "nameHashUtils"
      | "registry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "domainOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedForDomain",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedForDomainHash",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedForMultipleDomainHashes",
    values: [BytesLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedForMultipleDomains",
    values: [string[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nameHashUtils",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "domainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedForDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedForDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedForMultipleDomainHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedForMultipleDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameHashUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SCI extends BaseContract {
  connect(runner?: ContractRunner | null): SCI;
  waitForDeployment(): Promise<this>;

  interface: SCIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  domainOwner: TypedContractMethod<[domainHash: BytesLike], [string], "view">;

  initialize: TypedContractMethod<
    [registryAddress: AddressLike, nameHashAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isVerifiedForDomain: TypedContractMethod<
    [domain: string, chainId: BigNumberish, contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  isVerifiedForDomainHash: TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;

  isVerifiedForMultipleDomainHashes: TypedContractMethod<
    [
      domainsHash: BytesLike[],
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean[]],
    "view"
  >;

  isVerifiedForMultipleDomains: TypedContractMethod<
    [domains: string[], chainId: BigNumberish, contractAddress: AddressLike],
    [boolean[]],
    "view"
  >;

  nameHashUtils: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "domainOwner"
  ): TypedContractMethod<[domainHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [registryAddress: AddressLike, nameHashAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isVerifiedForDomain"
  ): TypedContractMethod<
    [domain: string, chainId: BigNumberish, contractAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifiedForDomainHash"
  ): TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifiedForMultipleDomainHashes"
  ): TypedContractMethod<
    [
      domainsHash: BytesLike[],
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifiedForMultipleDomains"
  ): TypedContractMethod<
    [domains: string[], chainId: BigNumberish, contractAddress: AddressLike],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nameHashUtils"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
