/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PublicListVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAddress"
      | "isVerified"
      | "removeAddress"
      | "sci"
      | "verifiedContracts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddressAdded" | "AddressRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAddress",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddress",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sci", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifiedContracts",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sci", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifiedContracts",
    data: BytesLike
  ): Result;
}

export namespace AddressAddedEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    chainId: BigNumberish,
    contractAddress: AddressLike,
    msgSender: AddressLike
  ];
  export type OutputTuple = [
    domainHash: string,
    chainId: bigint,
    contractAddress: string,
    msgSender: string
  ];
  export interface OutputObject {
    domainHash: string;
    chainId: bigint;
    contractAddress: string;
    msgSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddressRemovedEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    chainId: BigNumberish,
    contractAddress: AddressLike,
    msgSender: AddressLike
  ];
  export type OutputTuple = [
    domainHash: string,
    chainId: bigint,
    contractAddress: string,
    msgSender: string
  ];
  export interface OutputObject {
    domainHash: string;
    chainId: bigint;
    contractAddress: string;
    msgSender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublicListVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): PublicListVerifier;
  waitForDeployment(): Promise<this>;

  interface: PublicListVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAddress: TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isVerified: TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;

  removeAddress: TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  sci: TypedContractMethod<[], [string], "view">;

  verifiedContracts: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAddress"
  ): TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isVerified"
  ): TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAddress"
  ): TypedContractMethod<
    [
      domainHash: BytesLike,
      chainId: BigNumberish,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sci"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedContracts"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AddressAdded"
  ): TypedContractEvent<
    AddressAddedEvent.InputTuple,
    AddressAddedEvent.OutputTuple,
    AddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "AddressRemoved"
  ): TypedContractEvent<
    AddressRemovedEvent.InputTuple,
    AddressRemovedEvent.OutputTuple,
    AddressRemovedEvent.OutputObject
  >;

  filters: {
    "AddressAdded(bytes32,uint256,address,address)": TypedContractEvent<
      AddressAddedEvent.InputTuple,
      AddressAddedEvent.OutputTuple,
      AddressAddedEvent.OutputObject
    >;
    AddressAdded: TypedContractEvent<
      AddressAddedEvent.InputTuple,
      AddressAddedEvent.OutputTuple,
      AddressAddedEvent.OutputObject
    >;

    "AddressRemoved(bytes32,uint256,address,address)": TypedContractEvent<
      AddressRemovedEvent.InputTuple,
      AddressRemovedEvent.OutputTuple,
      AddressRemovedEvent.OutputObject
    >;
    AddressRemoved: TypedContractEvent<
      AddressRemovedEvent.InputTuple,
      AddressRemovedEvent.OutputTuple,
      AddressRemovedEvent.OutputObject
    >;
  };
}
