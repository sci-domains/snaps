/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSRegistry__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlDefaultAdminRules",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlDefaultAdminRules__factory>;
    getContractFactory(
      name: "IAccessControlDefaultAdminRules",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlDefaultAdminRules__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC5313",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5313__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "AlwaysFalseAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer__factory>;
    getContractFactory(
      name: "AlwaysTrueAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer__factory>;
    getContractFactory(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizer__factory>;
    getContractFactory(
      name: "ENSAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSAuthorizer__factory>;
    getContractFactory(
      name: "SCIAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SCIAuthorizer__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "RegistryV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryV0__factory>;
    getContractFactory(
      name: "SCI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SCI__factory>;
    getContractFactory(
      name: "DomainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DomainManager__factory>;
    getContractFactory(
      name: "NameHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameHash__factory>;
    getContractFactory(
      name: "PublicListVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicListVerifier__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;

    getContractAt(
      name: "ENS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "ENSRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSRegistry>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlDefaultAdminRules",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlDefaultAdminRules>;
    getContractAt(
      name: "IAccessControlDefaultAdminRules",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlDefaultAdminRules>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC5313",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5313>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "AlwaysFalseAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    getContractAt(
      name: "AlwaysTrueAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    getContractAt(
      name: "Authorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizer>;
    getContractAt(
      name: "ENSAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSAuthorizer>;
    getContractAt(
      name: "SCIAuthorizer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SCIAuthorizer>;
    getContractAt(
      name: "Registry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "RegistryV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryV0>;
    getContractAt(
      name: "SCI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SCI>;
    getContractAt(
      name: "DomainManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DomainManager>;
    getContractAt(
      name: "NameHash",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NameHash>;
    getContractAt(
      name: "PublicListVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicListVerifier>;
    getContractAt(
      name: "Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;

    deployContract(
      name: "ENS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "ENSRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSRegistry>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlDefaultAdminRules",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlDefaultAdminRules>;
    deployContract(
      name: "IAccessControlDefaultAdminRules",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlDefaultAdminRules>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5313",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5313>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "AlwaysFalseAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    deployContract(
      name: "AlwaysTrueAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    deployContract(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorizer>;
    deployContract(
      name: "ENSAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSAuthorizer>;
    deployContract(
      name: "SCIAuthorizer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCIAuthorizer>;
    deployContract(
      name: "Registry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "RegistryV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryV0>;
    deployContract(
      name: "SCI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCI>;
    deployContract(
      name: "DomainManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainManager>;
    deployContract(
      name: "NameHash",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NameHash>;
    deployContract(
      name: "PublicListVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PublicListVerifier>;
    deployContract(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;

    deployContract(
      name: "ENS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "ENSRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSRegistry>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlDefaultAdminRules",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlDefaultAdminRules>;
    deployContract(
      name: "IAccessControlDefaultAdminRules",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlDefaultAdminRules>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC5313",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5313>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "AlwaysFalseAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseAuthorizer>;
    deployContract(
      name: "AlwaysTrueAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysTrueAuthorizer>;
    deployContract(
      name: "Authorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorizer>;
    deployContract(
      name: "ENSAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSAuthorizer>;
    deployContract(
      name: "SCIAuthorizer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCIAuthorizer>;
    deployContract(
      name: "Registry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "RegistryV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryV0>;
    deployContract(
      name: "SCI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SCI>;
    deployContract(
      name: "DomainManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainManager>;
    deployContract(
      name: "NameHash",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NameHash>;
    deployContract(
      name: "PublicListVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PublicListVerifier>;
    deployContract(
      name: "Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
