/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AlwaysFalseAuthorizer,
  AlwaysFalseAuthorizerInterface,
} from "../../../contracts/Authorizers/AlwaysFalseAuthorizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ad806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de11892b14610030575b600080fd5b61004a60048036038101906100459190610101565b610060565b604051610057919061015c565b60405180910390f35b600092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100988261006d565b9050919050565b6100a88161008d565b81146100b357600080fd5b50565b6000813590506100c58161009f565b92915050565b6000819050919050565b6100de816100cb565b81146100e957600080fd5b50565b6000813590506100fb816100d5565b92915050565b6000806040838503121561011857610117610068565b5b6000610126858286016100b6565b9250506020610137858286016100ec565b9150509250929050565b60008115159050919050565b61015681610141565b82525050565b6000602082019050610171600083018461014d565b9291505056fea2646970667358221220972ab876a1e11119d868d87419b8e603f34428f2f4d78c21f742e653c4722cff64736f6c63430008140033";

type AlwaysFalseAuthorizerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlwaysFalseAuthorizerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlwaysFalseAuthorizer__factory extends ContractFactory {
  constructor(...args: AlwaysFalseAuthorizerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AlwaysFalseAuthorizer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AlwaysFalseAuthorizer__factory {
    return super.connect(runner) as AlwaysFalseAuthorizer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlwaysFalseAuthorizerInterface {
    return new Interface(_abi) as AlwaysFalseAuthorizerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AlwaysFalseAuthorizer {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AlwaysFalseAuthorizer;
  }
}
