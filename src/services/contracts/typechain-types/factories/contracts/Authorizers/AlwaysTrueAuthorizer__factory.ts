/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AlwaysTrueAuthorizer,
  AlwaysTrueAuthorizerInterface,
} from "../../../contracts/Authorizers/AlwaysTrueAuthorizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de11892b14610030575b600080fd5b61004a60048036038101906100459190610105565b610060565b6040516100579190610160565b60405180910390f35b60006001905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000813590506100c9816100a3565b92915050565b6000819050919050565b6100e2816100cf565b81146100ed57600080fd5b50565b6000813590506100ff816100d9565b92915050565b6000806040838503121561011c5761011b61006c565b5b600061012a858286016100ba565b925050602061013b858286016100f0565b9150509250929050565b60008115159050919050565b61015a81610145565b82525050565b60006020820190506101756000830184610151565b9291505056fea2646970667358221220bde776f68355d94065b3612df56db24f35086ead34e7d790ebd0a301234ca7cf64736f6c63430008140033";

type AlwaysTrueAuthorizerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlwaysTrueAuthorizerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlwaysTrueAuthorizer__factory extends ContractFactory {
  constructor(...args: AlwaysTrueAuthorizerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AlwaysTrueAuthorizer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AlwaysTrueAuthorizer__factory {
    return super.connect(runner) as AlwaysTrueAuthorizer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlwaysTrueAuthorizerInterface {
    return new Interface(_abi) as AlwaysTrueAuthorizerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AlwaysTrueAuthorizer {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AlwaysTrueAuthorizer;
  }
}
