/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "./common";
import type { SCI, SCIInterface } from "./SCI";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
    ],
    name: "domainOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "nameHashAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "isVerifiedForDomain",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domainHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "isVerifiedForDomainHash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domainsHash",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "isVerifiedForMultipleDomainHashes",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "domains",
        type: "string[]",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "isVerifiedForMultipleDomains",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nameHashUtils",
    outputs: [
      {
        internalType: "contract NameHash",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract Registry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506114b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b3e87f2c1161005b578063b3e87f2c14610127578063c17af55914610145578063d26cdd2014610175578063d44b6ad6146101a557610088565b806343ecf64e1461008d578063485cc955146100bd578063682beaf8146100d95780637b10399914610109575b600080fd5b6100a760048036038101906100a29190610b66565b6101d5565b6040516100b49190610c9f565b60405180910390f35b6100d760048036038101906100d29190610cc1565b61029a565b005b6100f360048036038101906100ee9190610db6565b6104a2565b6040516101009190610e34565b60405180910390f35b610111610553565b60405161011e9190610eae565b60405180910390f35b61012f610577565b60405161013c9190610eea565b60405180910390f35b61015f600480360381019061015a9190610f05565b61059d565b60405161016c9190610e34565b60405180910390f35b61018f600480360381019061018a9190610f58565b610703565b60405161019c9190610f94565b60405180910390f35b6101bf60048036038101906101ba9190611090565b6107a7565b6040516101cc9190610c9f565b60405180910390f35b60606000845167ffffffffffffffff8111156101f4576101f3610959565b5b6040519080825280602002602001820160405280156102225781602001602082028036833780820191505090505b50905060005b855181101561028e57610256868281518110610247576102466110ff565b5b6020026020010151868661059d565b828281518110610269576102686110ff565b5b60200260200101901515908115158152505080806102869061115d565b915050610228565b50809150509392505050565b60006102a4610907565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156102f25750825b9050600060018367ffffffffffffffff16148015610327575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610335575080155b1561036c576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156103bc5760018560000160086101000a81548160ff0219169083151502179055505b866000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156104995760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161049091906111f4565b60405180910390a15b50505050505050565b600061054a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307b5c385866040518263ffffffff1660e01b8152600401610502919061128e565b602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906112c5565b848461059d565b90509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b377fa2866040518263ffffffff1660e01b81526004016105f99190611301565b6040805180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610639919061136f565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361067a5760009150506106fc565b8073ffffffffffffffffffffffffffffffffffffffff1663f2ce2ee98686866040518463ffffffff1660e01b81526004016106b7939291906113be565b602060405180830381865afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190611421565b9150505b9392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d26cdd20836040518263ffffffff1660e01b815260040161075f9190611301565b602060405180830381865afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a0919061144e565b9050919050565b60606000845167ffffffffffffffff8111156107c6576107c5610959565b5b6040519080825280602002602001820160405280156107f45781602001602082028036833780820191505090505b50905060005b85518110156108fb576108c3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307b5c385888481518110610857576108566110ff565b5b60200260200101516040518263ffffffff1660e01b815260040161087b919061128e565b602060405180830381865afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc91906112c5565b868661059d565b8282815181106108d6576108d56110ff565b5b60200260200101901515908115158152505080806108f39061115d565b9150506107fa565b50809150509392505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61099182610948565b810181811067ffffffffffffffff821117156109b0576109af610959565b5b80604052505050565b60006109c361092f565b90506109cf8282610988565b919050565b600067ffffffffffffffff8211156109ef576109ee610959565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b610a1881610a05565b8114610a2357600080fd5b50565b600081359050610a3581610a0f565b92915050565b6000610a4e610a49846109d4565b6109b9565b90508083825260208201905060208402830185811115610a7157610a70610a00565b5b835b81811015610a9a5780610a868882610a26565b845260208401935050602081019050610a73565b5050509392505050565b600082601f830112610ab957610ab8610943565b5b8135610ac9848260208601610a3b565b91505092915050565b6000819050919050565b610ae581610ad2565b8114610af057600080fd5b50565b600081359050610b0281610adc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3382610b08565b9050919050565b610b4381610b28565b8114610b4e57600080fd5b50565b600081359050610b6081610b3a565b92915050565b600080600060608486031215610b7f57610b7e610939565b5b600084013567ffffffffffffffff811115610b9d57610b9c61093e565b5b610ba986828701610aa4565b9350506020610bba86828701610af3565b9250506040610bcb86828701610b51565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b610c1681610c01565b82525050565b6000610c288383610c0d565b60208301905092915050565b6000602082019050919050565b6000610c4c82610bd5565b610c568185610be0565b9350610c6183610bf1565b8060005b83811015610c92578151610c798882610c1c565b9750610c8483610c34565b925050600181019050610c65565b5085935050505092915050565b60006020820190508181036000830152610cb98184610c41565b905092915050565b60008060408385031215610cd857610cd7610939565b5b6000610ce685828601610b51565b9250506020610cf785828601610b51565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610d2157610d20610959565b5b610d2a82610948565b9050602081019050919050565b82818337600083830152505050565b6000610d59610d5484610d06565b6109b9565b905082815260208101848484011115610d7557610d74610d01565b5b610d80848285610d37565b509392505050565b600082601f830112610d9d57610d9c610943565b5b8135610dad848260208601610d46565b91505092915050565b600080600060608486031215610dcf57610dce610939565b5b600084013567ffffffffffffffff811115610ded57610dec61093e565b5b610df986828701610d88565b9350506020610e0a86828701610af3565b9250506040610e1b86828701610b51565b9150509250925092565b610e2e81610c01565b82525050565b6000602082019050610e496000830184610e25565b92915050565b6000819050919050565b6000610e74610e6f610e6a84610b08565b610e4f565b610b08565b9050919050565b6000610e8682610e59565b9050919050565b6000610e9882610e7b565b9050919050565b610ea881610e8d565b82525050565b6000602082019050610ec36000830184610e9f565b92915050565b6000610ed482610e7b565b9050919050565b610ee481610ec9565b82525050565b6000602082019050610eff6000830184610edb565b92915050565b600080600060608486031215610f1e57610f1d610939565b5b6000610f2c86828701610a26565b9350506020610f3d86828701610af3565b9250506040610f4e86828701610b51565b9150509250925092565b600060208284031215610f6e57610f6d610939565b5b6000610f7c84828501610a26565b91505092915050565b610f8e81610b28565b82525050565b6000602082019050610fa96000830184610f85565b92915050565b600067ffffffffffffffff821115610fca57610fc9610959565b5b602082029050602081019050919050565b6000610fee610fe984610faf565b6109b9565b9050808382526020820190506020840283018581111561101157611010610a00565b5b835b8181101561105857803567ffffffffffffffff81111561103657611035610943565b5b8086016110438982610d88565b85526020850194505050602081019050611013565b5050509392505050565b600082601f83011261107757611076610943565b5b8135611087848260208601610fdb565b91505092915050565b6000806000606084860312156110a9576110a8610939565b5b600084013567ffffffffffffffff8111156110c7576110c661093e565b5b6110d386828701611062565b93505060206110e486828701610af3565b92505060406110f586828701610b51565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116882610ad2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119a5761119961112e565b5b600182019050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006111de6111d96111d4846111a5565b610e4f565b6111af565b9050919050565b6111ee816111c3565b82525050565b600060208201905061120960008301846111e5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561124957808201518184015260208101905061122e565b60008484015250505050565b60006112608261120f565b61126a818561121a565b935061127a81856020860161122b565b61128381610948565b840191505092915050565b600060208201905081810360008301526112a88184611255565b905092915050565b6000815190506112bf81610a0f565b92915050565b6000602082840312156112db576112da610939565b5b60006112e9848285016112b0565b91505092915050565b6112fb81610a05565b82525050565b600060208201905061131660008301846112f2565b92915050565b60008151905061132b81610b3a565b92915050565b600061133c82610b28565b9050919050565b61134c81611331565b811461135757600080fd5b50565b60008151905061136981611343565b92915050565b6000806040838503121561138657611385610939565b5b60006113948582860161131c565b92505060206113a58582860161135a565b9150509250929050565b6113b881610ad2565b82525050565b60006060820190506113d360008301866112f2565b6113e060208301856113af565b6113ed6040830184610f85565b949350505050565b6113fe81610c01565b811461140957600080fd5b50565b60008151905061141b816113f5565b92915050565b60006020828403121561143757611436610939565b5b60006114458482850161140c565b91505092915050565b60006020828403121561146457611463610939565b5b60006114728482850161131c565b9150509291505056fea264697066735822122035b672db5503e16b0b6f4fe447d6e87c0db2ba76044e2761f51d34989ed1338864736f6c63430008140033";

type SCIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCI__factory extends ContractFactory {
  constructor(...args: SCIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SCI & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SCI__factory {
    return super.connect(runner) as SCI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCIInterface {
    return new Interface(_abi) as SCIInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SCI {
    return new Contract(address, _abi, runner) as unknown as SCI;
  }
}
